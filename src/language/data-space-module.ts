import { type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { DataSpaceGeneratedModule, DataSpaceGeneratedSharedModule } from '../../gen/language/generated/module.js';
import { DataSpaceValidator, registerValidationChecks } from './data-space-validator.js';
import { DataSpaceScopeProvider } from './data-space-scope-provider.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type DataSpaceAddedServices = {
    validation: {
        DataSpaceValidator: DataSpaceValidator
    }
};

/**
 * Intersection of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type DataSpaceServices = LangiumServices & DataSpaceAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const DataSpaceModule: Module<DataSpaceServices, PartialLangiumServices & DataSpaceAddedServices> = {
    validation: {
        DataSpaceValidator: () => new DataSpaceValidator()
    },
    references: {
        ScopeProvider: (services) => new DataSpaceScopeProvider(services)
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createDataSpaceServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    DataSpace: DataSpaceServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        DataSpaceGeneratedSharedModule
    );
    const DataSpace = inject(
        createDefaultModule({ shared }),
        DataSpaceGeneratedModule,
        DataSpaceModule
    );
    shared.ServiceRegistry.register(DataSpace);
    registerValidationChecks(DataSpace);
    // if (!context.connection) {
    //     // We don't run inside a language server
    //     // Therefore, initialize the configuration provider instantly
    //     shared.workspace.ConfigurationProvider.initialized({});
    // }
    return { shared, DataSpace };
}
